package com.iheart.slkp.server;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.Socket;

public class SLKPServerThread extends Thread{
	//
	private Socket socket;
	private DataInputStream dis;
	private DataOutputStream dos;
	private String id, pwd;
	private byte[] typeArr, lenArr;
	private boolean userCheck;
	public SLKPServerThread(Socket socket){
		this.socket = socket;
		this.id = "test";
		this.pwd = "test";
		this.userCheck = false;
	}
	@Override
	public void run() {
		//
		boolean isStop = false; // Thread 루프의 실행 및 중지에 관한 boolean
		
		try {
			dis = new DataInputStream(socket.getInputStream());
			dos = new DataOutputStream(socket.getOutputStream());
			typeArr = new byte[2];
			lenArr = new byte[2];
		} catch (IOException e) {
			System.out.println("스트림 생성을 실패하여 Thread를 종료합니다 : "+e.getMessage());
			isStop = true; // 스트림 생성에 실패하면 스레드 루프를 중지한다.
		}
		
		while(!isStop){
			// Header를 읽어온다.
			try {
				socket.setSoTimeout(5000);
				// 스트림의 2바이트를 읽어와 typeArr에 담는다. return - 읽어온 바이트 수
				int typeReadCount = dis.read(typeArr, 0, 2);
				// 위에서 읽은 바이트 다음 2바이트를 읽어오 lenArr에 담는다. return - 읽어온 바이트 수
				int lenReadCount = dis.read(lenArr, 0, 2);
				//바이트 개수 체크 Type - 2byte, len - 2byte
				boolean isCorrectByteCount = checkHeaderByteCount(typeReadCount, lenReadCount);
				//읽어온 바이트를 Type(String) len(short)로 구분해서 정확한 데이터가 들어왔는지 체크한다.
				boolean isCorrectValue = checkHeaderValue(typeArr, lenArr); 
				
				System.out.println("1 :" + typeReadCount);
				System.out.println("2 :" + lenReadCount);
				System.out.println("3 :" + isCorrectByteCount);
				System.out.println("4 :" + isCorrectValue);
				/** 
				 * Header 체크가 모두 True 이면 나버지 Body를 읽어들인다.
				 * **/
				byte[] echoArr = null;
				String serverMsg = "-> [FROM SERVER ^^]";
				if(isCorrectByteCount && isCorrectValue){
					String type = new String(typeArr, 0, 2, "UTF-8");
					short len = SLKPUtil.BytesToShort(lenArr, 1);
					//short len = 5;
					byte[] bodyArr = new byte[len];
					
					int bodyByteCount = dis.read(bodyArr, 0, len);
					String body = new String(bodyArr, 0, bodyByteCount, "UTF-8");
					
					System.out.println("Type ->"+ type);
					System.out.println("Length ->" + len);
					System.out.println("Body ->" + body);
					
					if(type.equals("ab") && !userCheck){ //사용자가 ab를 보내고, 유저 인증상태가 false이면
						// 사용자 인증 절차를 실행하라.
						// 사용자 정보가 맞다면 userCheck 가 true로 바뀐다.
						echoArr = userInfoCheck(body);
						uniCastMessage(echoArr);
					} else if(type.equals("cd") && userCheck){ // Type이 'cd'이고 사용자 인증이 완료된 경우.
						//[사용자가 보낸 메세지 + 서버가보내는 메세지] 형식으로 사용자에게 보내준다.
						echoArr = SLKPUtil.convertToProtocol(body + serverMsg, "cd");
						uniCastMessage(echoArr);
					} else { // 인증하지 않은 사용자가 메세지를 보내면.
						echoArr = SLKPUtil.convertToProtocol("인증되지 않은 사용자입니다.", "cd");
						uniCastMessage(echoArr);
					}
				} else{ // 클라이언트가 보낸 데이터가 이상하면 그냥 종료시켜라.
					System.out.println("[클라이언트 데이터 오류]");
					if(!socket.isClosed()) { socket.close(); } // 소켓 닫기.
					if(isStop){ isStop=false; } // 루프 종료
				}
				
			} catch (IOException e) {
				System.out.println("클라이언트의 접속이 끊어졌습니다 : " + e.getMessage());
				break;
			}
		}
	}
	private void uniCastMessage(byte[] echoArr){
		try {
			dos.write(echoArr);
			dos.flush();
		} catch (IOException e) {
			System.out.println("[클라이언트에게 데이터를 보내는 중 I/O 오류 발생]  " + e.getMessage());
		}
	}
	/**
	 * @param body
	 * 사용자 계정 확인
	 */
	private byte[] userInfoCheck(String body) {
		//
		String[] split = body.split("/");
		String userId = split[0];
		String userPwd = split[1];
		System.out.println("사용자 입력 아이디 : " + userId);
		System.out.println("사용자 입력 비번 : " + userPwd);
		
		// 사용자 입력정보와 서버의 계정정보가 일치하면.
		if(id.equals(userId) && pwd.equals(userPwd)){
			userCheck = true;
			return SLKPUtil.convertToProtocol("success", "bc");
		} else {
			userCheck = false;
			return SLKPUtil.convertToProtocol("fail", "bc");
		}
	}
	/**
	 * @param typeArr
	 * @param lenArr
	 * @return
	 * 헤더의 byte 값을 변환하여 데이터를 분석한다.
	 * type - 'ab'(인증), 'cd'(양방향메세지)
	 */
	private boolean checkHeaderValue(byte[] typeArr, byte[] lenArr) {
		//
		boolean flag = true;
		try {
			String type = new String(typeArr, 0, 2, "UTF-8");
			
			short len = SLKPUtil.BytesToShort(lenArr, 1);
			// type 이 'ab' 와 'cd' 만 허용한다.
			// Client->Server 는 'ab' -인증 타입과, 'cd' - 양방향 전송만 할 수 있다.
			if(type.equals("ab")){
				flag = true;
			} else if(type.equals("cd")){
				flag = true;
			}else {
				flag = false;
			}
		} catch (UnsupportedEncodingException e) {
			//
			e.printStackTrace();
		}
		return flag;
	}
	/**
	 * @param typeReadCount
	 * @param lenReadCount
	 * @return
	 * 헤더의 바이트 개수를 체크한다.
	 * Type - 2Byte, len - 2Byte
	 */
	private boolean checkHeaderByteCount(int typeReadCount, int lenReadCount) {
		//
		boolean flag = true;
		if(typeReadCount == -1 || typeReadCount == 0 || typeReadCount > 2){
			flag = false;
		} else if(lenReadCount == -1 || lenReadCount == 0 || lenReadCount > 2){
			flag = false;
		} 
		return flag;
	}
}
