package com.iheart.slkp.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.ByteBuffer;

/**
 * @author 성인
 *  --2Byte---2Byte----------가변길이------
 * |		|		|					|
 * |Type	|Length	|	Message			|
 * |		|		|					|
 *  ------------------------------------
 */
public class SLKPClientMain {
	//
	private Socket socket;
	
	public static void main(String[] args) {
		SLKPClientMain main = new SLKPClientMain();
		main.startClient();
		try {
			// 올바른 사용자인지 확인을 한다.
			// id = 'test' , pwd = 'test' 이다.
			// 계정정보가 맞지 않다면 서버에서 강제로 연결을 종료한다.
			Thread.sleep(3000);
			main.send("ab", "test/test"); // 인증
			Thread.sleep(3000);
			main.send("ab", "test/test"); // 인증
			// 위의 인증이 올바르다면 메세지를 보내고 
			// 서버로부터 eco 메세지를 받게 된다.
//			Thread.sleep(3000);
//			main.send("cd", "message god god "); // 메세지
			
			
			//강제종료 테스트
//			System.exit(-1);
			
			
			// 'bc' 타입은 서버->클라이언트 로 보내주는 인증응답 메세제이다.
			// 즉, 클라이언트에서 'bc'로 전송하는 것은 옳바른 형식이 아니기 때문에
			// 서버측에서 연결을 강제로 끊는다.
//			Thread.sleep(3000);
//			main.send("bc", "this is message");
			
			
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//인증.
		
		
	}
	
	public SLKPClientMain(){
		//
		
	}
	
	//연결 시작 코드.
	public void startClient(){
		//
		Thread thread = new Thread(){

			@Override
			public void run() {
				//
				try {
					socket = new Socket();
					//socket.connect(new InetSocketAddress("192.168.0.178", 9999));
					socket.connect(new InetSocketAddress("127.0.0.1", 9999));
					System.out.println("[연결완료 : " + socket.getRemoteSocketAddress() + "]");
				} catch (IOException e) {
					System.out.println("[서버 통신 안됨]");
					if(!socket.isClosed()) {
						stopClient();
					}
					return;
				}
				receive(); // 서버에서 보낸 데이터 받기.
			}
			
		};
		thread.start(); // Thread 시작.
	}
	
	//연결 종료 코드/
	public void stopClient(){
		//
		try {
			System.out.println("[연결 끊음]");
			
			if(socket!=null && !socket.isClosed()){
				socket.close();
			}
		} catch (IOException e) {}
	}
	
	// 서버에서 보낸 데이터를 받는 역할
	public void receive(){
		while(true){
			try {
				
				byte[] typeArr = new byte[2];
				byte[] lenArr = new byte[2];
				
				InputStream inputStream = socket.getInputStream();
				DataInputStream dis = new DataInputStream(inputStream);
				
				
				int typeByteCount = dis.read(typeArr, 0 , 2);
				if(typeByteCount == -1){
					System.exit(-1);
				}
				String type = new String(typeArr, 0, typeByteCount, "UTF-8");
				System.out.println("Type : " + type);
				int lenByteCount = dis.read(lenArr, 0, 2);
				// Intel 계열 - 2, MAC - 1
				short len = SLKPUtil.BytesToShort(lenArr, 1);
				System.out.println("Length : " + len);
				
				byte[] bodyArr = new byte[len];
				int bodyByteCount = dis.read(bodyArr, 0, len);
				String body = new String(bodyArr, 0, bodyByteCount, "UTF-8");
				if(dis.read() > 0 ){
					System.out.println("[Client] Length값과 Body의 길이가 일치하지 않습니다. 즉, 조작된 데이터입니다.");
					System.exit(-1);
				}
				System.out.println("Body : " + body);
				System.out.println("[받기 완료] " + body);
			} catch (IOException e) {
				System.out.println("[서버 통신 안됨]");
				stopClient();
				break; // 없으면 무한 루프
			}
		}
	}
	
	public void send(final String type, final String data){
		//
		Thread thread = new Thread(){
			@Override
			public void run() {
				// 
				try {
					ByteBuffer bb = SLKPUtil.convertToProtocol(data, type);
					//byte[] byteArr = data.getBytes("UTF-8");
					//서버로 데이터 보내
					DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
					outputStream.write(bb.array());
					outputStream.flush();
					System.out.println("[보내기 완료]");
				} catch (Exception e) {
					System.out.println("[서버 통신 안됨]");
					stopClient();
				}
			}
		};
		thread.start();
	}
	
	
}
